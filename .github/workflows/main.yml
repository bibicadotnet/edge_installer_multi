name: Check Update and Upload Releases

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '45 * * * *'  # Chạy mỗi 1 giờ, vào phút 45

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch all channel info
        run: python fetch.py

      - name: Process all channels
        run: |
          channels=("stable" "beta" "dev" "canary")
          archs=("x86" "x64" "ARM64")

          for channel in "${channels[@]}"; do
            # Lấy version từ x64 (coi như bản đại diện)
            key="msedge-${channel}-win-x64"
            version=$(jq -r --arg k "$key" '.[$k].version' data.json)

            if [ -z "$version" ] || [ "$version" = "null" ]; then
              echo "No version found for $channel, skipping..."
              continue
            fi

            tag="${channel}-${version}"

            echo "==== $channel ===="
            echo "Version: $version"
            echo "Tag: $tag"

            # Nếu tag đã tồn tại → bỏ qua
            if git rev-parse "refs/tags/${tag}" >/dev/null 2>&1; then
              echo "Tag $tag exists, skipping..."
              continue
            fi

            files=()
            for arch in "${archs[@]}"; do
              key="msedge-${channel}-win-${arch}"
              url=$(jq -r --arg k "$key" '.[$k]["下载链接"]' data.json)

              if [ -z "$url" ] || [ "$url" = "null" ]; then
                echo "No download URL for $channel $arch, skipping..."
                continue
              fi

              zip="edge-${channel}-${arch}-${version}.zip"
              echo "Downloading $arch: $url"
              curl -L --fail "$url" -o "$zip"
              files+=("$zip")
            done

            echo "Creating release $tag ..."
            gh release create "$tag" "${files[@]}" \
              --title "$tag" \
              --notes "Auto release for $channel version $version"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
